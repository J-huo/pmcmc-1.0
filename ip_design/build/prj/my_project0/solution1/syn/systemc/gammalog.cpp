// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.1
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "gammalog.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic gammalog::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic gammalog::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<8> gammalog::ap_ST_st1_fsm_0 = "00000000";
const sc_lv<8> gammalog::ap_ST_st2_fsm_1 = "1";
const sc_lv<8> gammalog::ap_ST_st3_fsm_2 = "10";
const sc_lv<8> gammalog::ap_ST_st4_fsm_3 = "11";
const sc_lv<8> gammalog::ap_ST_st5_fsm_4 = "100";
const sc_lv<8> gammalog::ap_ST_st6_fsm_5 = "101";
const sc_lv<8> gammalog::ap_ST_st7_fsm_6 = "110";
const sc_lv<8> gammalog::ap_ST_st8_fsm_7 = "111";
const sc_lv<8> gammalog::ap_ST_st9_fsm_8 = "1000";
const sc_lv<8> gammalog::ap_ST_st10_fsm_9 = "1001";
const sc_lv<8> gammalog::ap_ST_st11_fsm_10 = "1010";
const sc_lv<8> gammalog::ap_ST_st12_fsm_11 = "1011";
const sc_lv<8> gammalog::ap_ST_st13_fsm_12 = "1100";
const sc_lv<8> gammalog::ap_ST_st14_fsm_13 = "1101";
const sc_lv<8> gammalog::ap_ST_st15_fsm_14 = "1110";
const sc_lv<8> gammalog::ap_ST_st16_fsm_15 = "1111";
const sc_lv<8> gammalog::ap_ST_st17_fsm_16 = "10000";
const sc_lv<8> gammalog::ap_ST_st18_fsm_17 = "10001";
const sc_lv<8> gammalog::ap_ST_st19_fsm_18 = "10010";
const sc_lv<8> gammalog::ap_ST_st20_fsm_19 = "10011";
const sc_lv<8> gammalog::ap_ST_st21_fsm_20 = "10100";
const sc_lv<8> gammalog::ap_ST_st22_fsm_21 = "10101";
const sc_lv<8> gammalog::ap_ST_st23_fsm_22 = "10110";
const sc_lv<8> gammalog::ap_ST_st24_fsm_23 = "10111";
const sc_lv<8> gammalog::ap_ST_st25_fsm_24 = "11000";
const sc_lv<8> gammalog::ap_ST_st26_fsm_25 = "11001";
const sc_lv<8> gammalog::ap_ST_st27_fsm_26 = "11010";
const sc_lv<8> gammalog::ap_ST_st28_fsm_27 = "11011";
const sc_lv<8> gammalog::ap_ST_st29_fsm_28 = "11100";
const sc_lv<8> gammalog::ap_ST_st30_fsm_29 = "11101";
const sc_lv<8> gammalog::ap_ST_st31_fsm_30 = "11110";
const sc_lv<8> gammalog::ap_ST_st32_fsm_31 = "11111";
const sc_lv<8> gammalog::ap_ST_st33_fsm_32 = "100000";
const sc_lv<8> gammalog::ap_ST_st34_fsm_33 = "100001";
const sc_lv<8> gammalog::ap_ST_st35_fsm_34 = "100010";
const sc_lv<8> gammalog::ap_ST_st36_fsm_35 = "100011";
const sc_lv<8> gammalog::ap_ST_st37_fsm_36 = "100100";
const sc_lv<8> gammalog::ap_ST_st38_fsm_37 = "100101";
const sc_lv<8> gammalog::ap_ST_st39_fsm_38 = "100110";
const sc_lv<8> gammalog::ap_ST_st40_fsm_39 = "100111";
const sc_lv<8> gammalog::ap_ST_st41_fsm_40 = "101000";
const sc_lv<8> gammalog::ap_ST_st42_fsm_41 = "101001";
const sc_lv<8> gammalog::ap_ST_st43_fsm_42 = "101010";
const sc_lv<8> gammalog::ap_ST_st44_fsm_43 = "101011";
const sc_lv<8> gammalog::ap_ST_st45_fsm_44 = "101100";
const sc_lv<8> gammalog::ap_ST_st46_fsm_45 = "101101";
const sc_lv<8> gammalog::ap_ST_st47_fsm_46 = "101110";
const sc_lv<8> gammalog::ap_ST_st48_fsm_47 = "101111";
const sc_lv<8> gammalog::ap_ST_st49_fsm_48 = "110000";
const sc_lv<8> gammalog::ap_ST_st50_fsm_49 = "110001";
const sc_lv<8> gammalog::ap_ST_st51_fsm_50 = "110010";
const sc_lv<8> gammalog::ap_ST_st52_fsm_51 = "110011";
const sc_lv<8> gammalog::ap_ST_st53_fsm_52 = "110100";
const sc_lv<8> gammalog::ap_ST_st54_fsm_53 = "110101";
const sc_lv<8> gammalog::ap_ST_st55_fsm_54 = "110110";
const sc_lv<8> gammalog::ap_ST_st56_fsm_55 = "110111";
const sc_lv<8> gammalog::ap_ST_st57_fsm_56 = "111000";
const sc_lv<8> gammalog::ap_ST_st58_fsm_57 = "111001";
const sc_lv<8> gammalog::ap_ST_st59_fsm_58 = "111010";
const sc_lv<8> gammalog::ap_ST_st60_fsm_59 = "111011";
const sc_lv<8> gammalog::ap_ST_st61_fsm_60 = "111100";
const sc_lv<8> gammalog::ap_ST_st62_fsm_61 = "111101";
const sc_lv<8> gammalog::ap_ST_st63_fsm_62 = "111110";
const sc_lv<8> gammalog::ap_ST_st64_fsm_63 = "111111";
const sc_lv<8> gammalog::ap_ST_st65_fsm_64 = "1000000";
const sc_lv<8> gammalog::ap_ST_st66_fsm_65 = "1000001";
const sc_lv<8> gammalog::ap_ST_st67_fsm_66 = "1000010";
const sc_lv<8> gammalog::ap_ST_st68_fsm_67 = "1000011";
const sc_lv<8> gammalog::ap_ST_st69_fsm_68 = "1000100";
const sc_lv<8> gammalog::ap_ST_st70_fsm_69 = "1000101";
const sc_lv<8> gammalog::ap_ST_st71_fsm_70 = "1000110";
const sc_lv<8> gammalog::ap_ST_st72_fsm_71 = "1000111";
const sc_lv<8> gammalog::ap_ST_st73_fsm_72 = "1001000";
const sc_lv<8> gammalog::ap_ST_st74_fsm_73 = "1001001";
const sc_lv<8> gammalog::ap_ST_st75_fsm_74 = "1001010";
const sc_lv<8> gammalog::ap_ST_st76_fsm_75 = "1001011";
const sc_lv<8> gammalog::ap_ST_st77_fsm_76 = "1001100";
const sc_lv<8> gammalog::ap_ST_st78_fsm_77 = "1001101";
const sc_lv<8> gammalog::ap_ST_st79_fsm_78 = "1001110";
const sc_lv<8> gammalog::ap_ST_st80_fsm_79 = "1001111";
const sc_lv<8> gammalog::ap_ST_st81_fsm_80 = "1010000";
const sc_lv<8> gammalog::ap_ST_st82_fsm_81 = "1010001";
const sc_lv<8> gammalog::ap_ST_st83_fsm_82 = "1010010";
const sc_lv<8> gammalog::ap_ST_st84_fsm_83 = "1010011";
const sc_lv<8> gammalog::ap_ST_st85_fsm_84 = "1010100";
const sc_lv<8> gammalog::ap_ST_st86_fsm_85 = "1010101";
const sc_lv<8> gammalog::ap_ST_st87_fsm_86 = "1010110";
const sc_lv<8> gammalog::ap_ST_st88_fsm_87 = "1010111";
const sc_lv<8> gammalog::ap_ST_st89_fsm_88 = "1011000";
const sc_lv<8> gammalog::ap_ST_st90_fsm_89 = "1011001";
const sc_lv<8> gammalog::ap_ST_st91_fsm_90 = "1011010";
const sc_lv<8> gammalog::ap_ST_st92_fsm_91 = "1011011";
const sc_lv<8> gammalog::ap_ST_st93_fsm_92 = "1011100";
const sc_lv<8> gammalog::ap_ST_st94_fsm_93 = "1011101";
const sc_lv<8> gammalog::ap_ST_st95_fsm_94 = "1011110";
const sc_lv<8> gammalog::ap_ST_st96_fsm_95 = "1011111";
const sc_lv<8> gammalog::ap_ST_st97_fsm_96 = "1100000";
const sc_lv<8> gammalog::ap_ST_st98_fsm_97 = "1100001";
const sc_lv<8> gammalog::ap_ST_st99_fsm_98 = "1100010";
const sc_lv<8> gammalog::ap_ST_st100_fsm_99 = "1100011";
const sc_lv<8> gammalog::ap_ST_st101_fsm_100 = "1100100";
const sc_lv<8> gammalog::ap_ST_st102_fsm_101 = "1100101";
const sc_lv<8> gammalog::ap_ST_st103_fsm_102 = "1100110";
const sc_lv<8> gammalog::ap_ST_st104_fsm_103 = "1100111";
const sc_lv<8> gammalog::ap_ST_st105_fsm_104 = "1101000";
const sc_lv<8> gammalog::ap_ST_st106_fsm_105 = "1101001";
const sc_lv<8> gammalog::ap_ST_st107_fsm_106 = "1101010";
const sc_lv<8> gammalog::ap_ST_st108_fsm_107 = "1101011";
const sc_lv<8> gammalog::ap_ST_st109_fsm_108 = "1101100";
const sc_lv<8> gammalog::ap_ST_st110_fsm_109 = "1101101";
const sc_lv<8> gammalog::ap_ST_st111_fsm_110 = "1101110";
const sc_lv<8> gammalog::ap_ST_st112_fsm_111 = "1101111";
const sc_lv<8> gammalog::ap_ST_st113_fsm_112 = "1110000";
const sc_lv<8> gammalog::ap_ST_st114_fsm_113 = "1110001";
const sc_lv<8> gammalog::ap_ST_st115_fsm_114 = "1110010";
const sc_lv<8> gammalog::ap_ST_st116_fsm_115 = "1110011";
const sc_lv<8> gammalog::ap_ST_st117_fsm_116 = "1110100";
const sc_lv<8> gammalog::ap_ST_st118_fsm_117 = "1110101";
const sc_lv<8> gammalog::ap_ST_st119_fsm_118 = "1110110";
const sc_lv<8> gammalog::ap_ST_st120_fsm_119 = "1110111";
const sc_lv<8> gammalog::ap_ST_st121_fsm_120 = "1111000";
const sc_lv<8> gammalog::ap_ST_st122_fsm_121 = "1111001";
const sc_lv<8> gammalog::ap_ST_st123_fsm_122 = "1111010";
const sc_lv<8> gammalog::ap_ST_st124_fsm_123 = "1111011";
const sc_lv<8> gammalog::ap_ST_st125_fsm_124 = "1111100";
const sc_lv<8> gammalog::ap_ST_st126_fsm_125 = "1111101";
const sc_lv<8> gammalog::ap_ST_st127_fsm_126 = "1111110";
const sc_lv<8> gammalog::ap_ST_st128_fsm_127 = "1111111";
const sc_lv<8> gammalog::ap_ST_st129_fsm_128 = "10000000";
const sc_lv<8> gammalog::ap_ST_st130_fsm_129 = "10000001";
const sc_lv<8> gammalog::ap_ST_st131_fsm_130 = "10000010";
const sc_lv<1> gammalog::ap_const_lv1_0 = "0";
const sc_lv<32> gammalog::ap_const_lv32_3F800000 = "111111100000000000000000000000";
const sc_lv<3> gammalog::ap_const_lv3_0 = "000";
const sc_lv<32> gammalog::ap_const_lv32_F149F2CA = "11110001010010011111001011001010";
const sc_lv<32> gammalog::ap_const_lv32_7149F2CA = "1110001010010011111001011001010";
const sc_lv<32> gammalog::ap_const_lv32_BF800000 = "10111111100000000000000000000000";
const sc_lv<32> gammalog::ap_const_lv32_40B00000 = "1000000101100000000000000000000";
const sc_lv<32> gammalog::ap_const_lv32_3F000000 = "111111000000000000000000000000";
const sc_lv<32> gammalog::ap_const_lv32_40206C99 = "1000000001000000110110010011001";
const sc_lv<32> gammalog::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> gammalog::ap_const_lv1_1 = "1";
const sc_lv<32> gammalog::ap_const_lv32_80000000 = "10000000000000000000000000000000";
const sc_lv<3> gammalog::ap_const_lv3_6 = "110";
const sc_lv<3> gammalog::ap_const_lv3_1 = "1";
const sc_lv<2> gammalog::ap_const_lv2_0 = "00";
const sc_lv<2> gammalog::ap_const_lv2_1 = "1";
const sc_lv<5> gammalog::ap_const_lv5_4 = "100";
const sc_lv<5> gammalog::ap_const_lv5_1 = "1";
const sc_lv<5> gammalog::ap_const_lv5_2 = "10";
const sc_lv<5> gammalog::ap_const_lv5_5 = "101";

gammalog::gammalog(sc_module_name name) : sc_module(name), mVcdFile(0) {
    cof_U = new gammalog_cof("cof_U");
    cof_U->clk(ap_clk);
    cof_U->reset(ap_rst);
    cof_U->address0(cof_address0);
    cof_U->ce0(cof_ce0);
    cof_U->q0(cof_q0);
    foo_faddfsub_32ns_32ns_32_8_full_dsp_U309 = new foo_faddfsub_32ns_32ns_32_8_full_dsp<309,8,32,32,32>("foo_faddfsub_32ns_32ns_32_8_full_dsp_U309");
    foo_faddfsub_32ns_32ns_32_8_full_dsp_U309->clk(ap_clk);
    foo_faddfsub_32ns_32ns_32_8_full_dsp_U309->reset(ap_rst);
    foo_faddfsub_32ns_32ns_32_8_full_dsp_U309->din0(grp_fu_126_p0);
    foo_faddfsub_32ns_32ns_32_8_full_dsp_U309->din1(grp_fu_126_p1);
    foo_faddfsub_32ns_32ns_32_8_full_dsp_U309->opcode(grp_fu_126_opcode);
    foo_faddfsub_32ns_32ns_32_8_full_dsp_U309->ce(grp_fu_126_ce);
    foo_faddfsub_32ns_32ns_32_8_full_dsp_U309->dout(grp_fu_126_p2);
    foo_fmul_32ns_32ns_32_4_max_dsp_U310 = new foo_fmul_32ns_32ns_32_4_max_dsp<310,4,32,32,32>("foo_fmul_32ns_32ns_32_4_max_dsp_U310");
    foo_fmul_32ns_32ns_32_4_max_dsp_U310->clk(ap_clk);
    foo_fmul_32ns_32ns_32_4_max_dsp_U310->reset(ap_rst);
    foo_fmul_32ns_32ns_32_4_max_dsp_U310->din0(grp_fu_136_p0);
    foo_fmul_32ns_32ns_32_4_max_dsp_U310->din1(grp_fu_136_p1);
    foo_fmul_32ns_32ns_32_4_max_dsp_U310->ce(grp_fu_136_ce);
    foo_fmul_32ns_32ns_32_4_max_dsp_U310->dout(grp_fu_136_p2);
    foo_fdiv_32ns_32ns_32_16_U311 = new foo_fdiv_32ns_32ns_32_16<311,16,32,32,32>("foo_fdiv_32ns_32ns_32_16_U311");
    foo_fdiv_32ns_32ns_32_16_U311->clk(ap_clk);
    foo_fdiv_32ns_32ns_32_16_U311->reset(ap_rst);
    foo_fdiv_32ns_32ns_32_16_U311->din0(grp_fu_142_p0);
    foo_fdiv_32ns_32ns_32_16_U311->din1(grp_fu_142_p1);
    foo_fdiv_32ns_32ns_32_16_U311->ce(grp_fu_142_ce);
    foo_fdiv_32ns_32ns_32_16_U311->dout(grp_fu_142_p2);
    foo_fcmp_32ns_32ns_1_3_U312 = new foo_fcmp_32ns_32ns_1_3<312,3,32,32,1>("foo_fcmp_32ns_32ns_1_3_U312");
    foo_fcmp_32ns_32ns_1_3_U312->clk(ap_clk);
    foo_fcmp_32ns_32ns_1_3_U312->reset(ap_rst);
    foo_fcmp_32ns_32ns_1_3_U312->din0(grp_fu_146_p0);
    foo_fcmp_32ns_32ns_1_3_U312->din1(grp_fu_146_p1);
    foo_fcmp_32ns_32ns_1_3_U312->ce(grp_fu_146_ce);
    foo_fcmp_32ns_32ns_1_3_U312->opcode(grp_fu_146_opcode);
    foo_fcmp_32ns_32ns_1_3_U312->dout(grp_fu_146_p2);
    foo_fcmp_32ns_32ns_1_3_U313 = new foo_fcmp_32ns_32ns_1_3<313,3,32,32,1>("foo_fcmp_32ns_32ns_1_3_U313");
    foo_fcmp_32ns_32ns_1_3_U313->clk(ap_clk);
    foo_fcmp_32ns_32ns_1_3_U313->reset(ap_rst);
    foo_fcmp_32ns_32ns_1_3_U313->din0(grp_fu_152_p0);
    foo_fcmp_32ns_32ns_1_3_U313->din1(grp_fu_152_p1);
    foo_fcmp_32ns_32ns_1_3_U313->ce(grp_fu_152_ce);
    foo_fcmp_32ns_32ns_1_3_U313->opcode(grp_fu_152_opcode);
    foo_fcmp_32ns_32ns_1_3_U313->dout(grp_fu_152_p2);
    foo_fcmp_32ns_32ns_1_3_U314 = new foo_fcmp_32ns_32ns_1_3<314,3,32,32,1>("foo_fcmp_32ns_32ns_1_3_U314");
    foo_fcmp_32ns_32ns_1_3_U314->clk(ap_clk);
    foo_fcmp_32ns_32ns_1_3_U314->reset(ap_rst);
    foo_fcmp_32ns_32ns_1_3_U314->din0(grp_fu_158_p0);
    foo_fcmp_32ns_32ns_1_3_U314->din1(grp_fu_158_p1);
    foo_fcmp_32ns_32ns_1_3_U314->ce(grp_fu_158_ce);
    foo_fcmp_32ns_32ns_1_3_U314->opcode(grp_fu_158_opcode);
    foo_fcmp_32ns_32ns_1_3_U314->dout(grp_fu_158_p2);
    foo_flog_32ns_32ns_32_14_full_dsp_U315 = new foo_flog_32ns_32ns_32_14_full_dsp<315,14,32,32,32>("foo_flog_32ns_32ns_32_14_full_dsp_U315");
    foo_flog_32ns_32ns_32_14_full_dsp_U315->clk(ap_clk);
    foo_flog_32ns_32ns_32_14_full_dsp_U315->reset(ap_rst);
    foo_flog_32ns_32ns_32_14_full_dsp_U315->din0(grp_fu_165_p0);
    foo_flog_32ns_32ns_32_14_full_dsp_U315->din1(grp_fu_165_p1);
    foo_flog_32ns_32ns_32_14_full_dsp_U315->ce(grp_fu_165_ce);
    foo_flog_32ns_32ns_32_14_full_dsp_U315->dout(grp_fu_165_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_CS_fsm );
    sensitive << ( p_0_phi_fu_113_p8 );
    sensitive << ( ap_return_preg );

    SC_METHOD(thread_cof_address0);
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_26_i_fu_287_p1 );

    SC_METHOD(thread_cof_ce0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_exitcond_i_fu_275_p2);
    sensitive << ( ap_CS_fsm );
    sensitive << ( j_i_reg_96 );

    SC_METHOD(thread_grp_fu_126_ce);

    SC_METHOD(thread_grp_fu_126_opcode);
    sensitive << ( ap_CS_fsm );
    sensitive << ( or_cond5_fu_258_p2 );
    sensitive << ( exitcond_i_fu_275_p2 );

    SC_METHOD(thread_grp_fu_126_p0);
    sensitive << ( ap_CS_fsm );
    sensitive << ( a );
    sensitive << ( reg_170 );
    sensitive << ( reg_179 );
    sensitive << ( reg_185 );
    sensitive << ( reg_192 );
    sensitive << ( reg_204 );
    sensitive << ( ser_i_reg_74 );
    sensitive << ( x1_i_reg_86 );

    SC_METHOD(thread_grp_fu_126_p1);
    sensitive << ( ap_CS_fsm );
    sensitive << ( reg_170 );
    sensitive << ( reg_185 );
    sensitive << ( reg_192 );
    sensitive << ( reg_198 );
    sensitive << ( tmp_25_reg_392 );

    SC_METHOD(thread_grp_fu_136_ce);

    SC_METHOD(thread_grp_fu_136_p0);
    sensitive << ( ap_CS_fsm );
    sensitive << ( reg_170 );
    sensitive << ( reg_209 );
    sensitive << ( tmp_24_reg_387 );
    sensitive << ( ser_i_reg_74 );

    SC_METHOD(thread_grp_fu_136_p1);
    sensitive << ( ap_CS_fsm );
    sensitive << ( a );
    sensitive << ( reg_179 );

    SC_METHOD(thread_grp_fu_142_ce);

    SC_METHOD(thread_grp_fu_142_p0);
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_19_fu_271_p1 );
    sensitive << ( cof_load_reg_410 );

    SC_METHOD(thread_grp_fu_142_p1);
    sensitive << ( ap_CS_fsm );
    sensitive << ( b );
    sensitive << ( reg_209 );

    SC_METHOD(thread_grp_fu_146_ce);

    SC_METHOD(thread_grp_fu_146_opcode);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( or_cond1_fu_237_p2 );
    sensitive << ( or_cond3_fu_247_p2 );

    SC_METHOD(thread_grp_fu_146_p0);
    sensitive << ( ap_CS_fsm );
    sensitive << ( x );
    sensitive << ( a );

    SC_METHOD(thread_grp_fu_146_p1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_grp_fu_152_ce);

    SC_METHOD(thread_grp_fu_152_opcode);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( or_cond1_fu_237_p2 );

    SC_METHOD(thread_grp_fu_152_p0);
    sensitive << ( ap_CS_fsm );
    sensitive << ( a );
    sensitive << ( b );

    SC_METHOD(thread_grp_fu_152_p1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_grp_fu_158_ce);

    SC_METHOD(thread_grp_fu_158_opcode);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_grp_fu_158_p0);
    sensitive << ( ap_CS_fsm );
    sensitive << ( b );

    SC_METHOD(thread_grp_fu_158_p1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_grp_fu_165_ce);

    SC_METHOD(thread_grp_fu_165_p0);

    SC_METHOD(thread_grp_fu_165_p1);
    sensitive << ( ap_CS_fsm );
    sensitive << ( x );
    sensitive << ( b );
    sensitive << ( reg_185 );
    sensitive << ( reg_198 );

    SC_METHOD(thread_j_fu_281_p2);
    sensitive << ( j_i_reg_96 );

    SC_METHOD(thread_or_cond1_fu_237_p2);
    sensitive << ( tmp1_fu_231_p2 );
    sensitive << ( tmp_36_fu_221_p2 );

    SC_METHOD(thread_or_cond3_fu_247_p2);
    sensitive << ( grp_fu_146_p2 );
    sensitive << ( tmp2_fu_243_p2 );

    SC_METHOD(thread_or_cond5_fu_258_p2);
    sensitive << ( tmp_s_reg_359 );
    sensitive << ( tmp3_reg_368 );

    SC_METHOD(thread_p_0_phi_fu_113_p8);
    sensitive << ( ap_CS_fsm );
    sensitive << ( reg_170 );
    sensitive << ( or_cond1_reg_344 );
    sensitive << ( or_cond3_reg_364 );
    sensitive << ( or_cond5_reg_373 );
    sensitive << ( p_0_reg_108 );

    SC_METHOD(thread_tmp1_fu_231_p2);
    sensitive << ( tmp_34_fu_216_p2 );
    sensitive << ( tmp_38_fu_226_p2 );

    SC_METHOD(thread_tmp2_fu_243_p2);
    sensitive << ( tmp_14_reg_348 );
    sensitive << ( tmp_15_reg_353 );

    SC_METHOD(thread_tmp3_fu_253_p2);
    sensitive << ( grp_fu_146_p2 );
    sensitive << ( tmp_15_reg_353 );

    SC_METHOD(thread_tmp_123_neg_fu_296_p2);
    sensitive << ( tmp_123_to_int_fu_292_p1 );

    SC_METHOD(thread_tmp_123_to_int_fu_292_p1);
    sensitive << ( reg_179 );

    SC_METHOD(thread_tmp_125_neg_fu_265_p2);
    sensitive << ( tmp_125_to_int_fu_262_p1 );

    SC_METHOD(thread_tmp_125_to_int_fu_262_p1);
    sensitive << ( x );

    SC_METHOD(thread_tmp_17_fu_302_p1);
    sensitive << ( tmp_123_neg_fu_296_p2 );

    SC_METHOD(thread_tmp_19_fu_271_p1);
    sensitive << ( tmp_125_neg_reg_377 );

    SC_METHOD(thread_tmp_26_i_fu_287_p1);
    sensitive << ( j_i_reg_96 );

    SC_METHOD(thread_tmp_34_fu_216_p2);
    sensitive << ( tmp_reg_329 );

    SC_METHOD(thread_tmp_36_fu_221_p2);
    sensitive << ( tmp_35_reg_334 );

    SC_METHOD(thread_tmp_38_fu_226_p2);
    sensitive << ( tmp_37_reg_339 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( or_cond1_fu_237_p2 );
    sensitive << ( or_cond3_fu_247_p2 );
    sensitive << ( or_cond5_fu_258_p2 );
    sensitive << ( exitcond_i_fu_275_p2 );

    ap_CS_fsm = "00000000";
    ap_return_preg = "00000000000000000000000000000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "gammalog_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, x, "(port)x");
    sc_trace(mVcdFile, a, "(port)a");
    sc_trace(mVcdFile, b, "(port)b");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, cof_address0, "cof_address0");
    sc_trace(mVcdFile, cof_ce0, "cof_ce0");
    sc_trace(mVcdFile, cof_q0, "cof_q0");
    sc_trace(mVcdFile, grp_fu_126_p2, "grp_fu_126_p2");
    sc_trace(mVcdFile, reg_170, "reg_170");
    sc_trace(mVcdFile, grp_fu_165_p2, "grp_fu_165_p2");
    sc_trace(mVcdFile, reg_179, "reg_179");
    sc_trace(mVcdFile, reg_185, "reg_185");
    sc_trace(mVcdFile, grp_fu_142_p2, "grp_fu_142_p2");
    sc_trace(mVcdFile, reg_192, "reg_192");
    sc_trace(mVcdFile, grp_fu_136_p2, "grp_fu_136_p2");
    sc_trace(mVcdFile, reg_198, "reg_198");
    sc_trace(mVcdFile, reg_204, "reg_204");
    sc_trace(mVcdFile, reg_209, "reg_209");
    sc_trace(mVcdFile, grp_fu_146_p2, "grp_fu_146_p2");
    sc_trace(mVcdFile, tmp_reg_329, "tmp_reg_329");
    sc_trace(mVcdFile, grp_fu_152_p2, "grp_fu_152_p2");
    sc_trace(mVcdFile, tmp_35_reg_334, "tmp_35_reg_334");
    sc_trace(mVcdFile, grp_fu_158_p2, "grp_fu_158_p2");
    sc_trace(mVcdFile, tmp_37_reg_339, "tmp_37_reg_339");
    sc_trace(mVcdFile, or_cond1_fu_237_p2, "or_cond1_fu_237_p2");
    sc_trace(mVcdFile, or_cond1_reg_344, "or_cond1_reg_344");
    sc_trace(mVcdFile, tmp_14_reg_348, "tmp_14_reg_348");
    sc_trace(mVcdFile, tmp_15_reg_353, "tmp_15_reg_353");
    sc_trace(mVcdFile, tmp_s_reg_359, "tmp_s_reg_359");
    sc_trace(mVcdFile, or_cond3_fu_247_p2, "or_cond3_fu_247_p2");
    sc_trace(mVcdFile, or_cond3_reg_364, "or_cond3_reg_364");
    sc_trace(mVcdFile, tmp3_fu_253_p2, "tmp3_fu_253_p2");
    sc_trace(mVcdFile, tmp3_reg_368, "tmp3_reg_368");
    sc_trace(mVcdFile, or_cond5_fu_258_p2, "or_cond5_fu_258_p2");
    sc_trace(mVcdFile, or_cond5_reg_373, "or_cond5_reg_373");
    sc_trace(mVcdFile, tmp_125_neg_fu_265_p2, "tmp_125_neg_fu_265_p2");
    sc_trace(mVcdFile, tmp_125_neg_reg_377, "tmp_125_neg_reg_377");
    sc_trace(mVcdFile, tmp_19_fu_271_p1, "tmp_19_fu_271_p1");
    sc_trace(mVcdFile, tmp_24_reg_387, "tmp_24_reg_387");
    sc_trace(mVcdFile, tmp_25_reg_392, "tmp_25_reg_392");
    sc_trace(mVcdFile, j_fu_281_p2, "j_fu_281_p2");
    sc_trace(mVcdFile, j_reg_400, "j_reg_400");
    sc_trace(mVcdFile, cof_load_reg_410, "cof_load_reg_410");
    sc_trace(mVcdFile, tmp_17_fu_302_p1, "tmp_17_fu_302_p1");
    sc_trace(mVcdFile, ser_i_reg_74, "ser_i_reg_74");
    sc_trace(mVcdFile, x1_i_reg_86, "x1_i_reg_86");
    sc_trace(mVcdFile, j_i_reg_96, "j_i_reg_96");
    sc_trace(mVcdFile, p_0_phi_fu_113_p8, "p_0_phi_fu_113_p8");
    sc_trace(mVcdFile, p_0_reg_108, "p_0_reg_108");
    sc_trace(mVcdFile, tmp_26_i_fu_287_p1, "tmp_26_i_fu_287_p1");
    sc_trace(mVcdFile, grp_fu_126_p0, "grp_fu_126_p0");
    sc_trace(mVcdFile, grp_fu_126_p1, "grp_fu_126_p1");
    sc_trace(mVcdFile, grp_fu_136_p0, "grp_fu_136_p0");
    sc_trace(mVcdFile, grp_fu_136_p1, "grp_fu_136_p1");
    sc_trace(mVcdFile, grp_fu_142_p0, "grp_fu_142_p0");
    sc_trace(mVcdFile, grp_fu_142_p1, "grp_fu_142_p1");
    sc_trace(mVcdFile, grp_fu_146_p0, "grp_fu_146_p0");
    sc_trace(mVcdFile, grp_fu_146_p1, "grp_fu_146_p1");
    sc_trace(mVcdFile, grp_fu_152_p0, "grp_fu_152_p0");
    sc_trace(mVcdFile, grp_fu_152_p1, "grp_fu_152_p1");
    sc_trace(mVcdFile, grp_fu_158_p0, "grp_fu_158_p0");
    sc_trace(mVcdFile, grp_fu_158_p1, "grp_fu_158_p1");
    sc_trace(mVcdFile, grp_fu_165_p1, "grp_fu_165_p1");
    sc_trace(mVcdFile, tmp_34_fu_216_p2, "tmp_34_fu_216_p2");
    sc_trace(mVcdFile, tmp_38_fu_226_p2, "tmp_38_fu_226_p2");
    sc_trace(mVcdFile, tmp1_fu_231_p2, "tmp1_fu_231_p2");
    sc_trace(mVcdFile, tmp_36_fu_221_p2, "tmp_36_fu_221_p2");
    sc_trace(mVcdFile, tmp2_fu_243_p2, "tmp2_fu_243_p2");
    sc_trace(mVcdFile, tmp_125_to_int_fu_262_p1, "tmp_125_to_int_fu_262_p1");
    sc_trace(mVcdFile, tmp_123_to_int_fu_292_p1, "tmp_123_to_int_fu_292_p1");
    sc_trace(mVcdFile, tmp_123_neg_fu_296_p2, "tmp_123_neg_fu_296_p2");
    sc_trace(mVcdFile, grp_fu_126_opcode, "grp_fu_126_opcode");
    sc_trace(mVcdFile, exitcond_i_fu_275_p2, "exitcond_i_fu_275_p2");
    sc_trace(mVcdFile, grp_fu_126_ce, "grp_fu_126_ce");
    sc_trace(mVcdFile, grp_fu_136_ce, "grp_fu_136_ce");
    sc_trace(mVcdFile, grp_fu_142_ce, "grp_fu_142_ce");
    sc_trace(mVcdFile, grp_fu_146_ce, "grp_fu_146_ce");
    sc_trace(mVcdFile, grp_fu_146_opcode, "grp_fu_146_opcode");
    sc_trace(mVcdFile, grp_fu_152_ce, "grp_fu_152_ce");
    sc_trace(mVcdFile, grp_fu_152_opcode, "grp_fu_152_opcode");
    sc_trace(mVcdFile, grp_fu_158_ce, "grp_fu_158_ce");
    sc_trace(mVcdFile, grp_fu_158_opcode, "grp_fu_158_opcode");
    sc_trace(mVcdFile, grp_fu_165_p0, "grp_fu_165_p0");
    sc_trace(mVcdFile, grp_fu_165_ce, "grp_fu_165_ce");
    sc_trace(mVcdFile, ap_return_preg, "ap_return_preg");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

gammalog::~gammalog() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete cof_U;
    delete foo_faddfsub_32ns_32ns_32_8_full_dsp_U309;
    delete foo_fmul_32ns_32ns_32_4_max_dsp_U310;
    delete foo_fdiv_32ns_32ns_32_16_U311;
    delete foo_fcmp_32ns_32ns_1_3_U312;
    delete foo_fcmp_32ns_32ns_1_3_U313;
    delete foo_fcmp_32ns_32ns_1_3_U314;
    delete foo_flog_32ns_32ns_32_14_full_dsp_U315;
}

void gammalog::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_preg = ap_const_lv32_0;
    } else {
        if (esl_seteq<1,8,8>(ap_ST_st117_fsm_116, ap_CS_fsm.read())) {
            ap_return_preg = p_0_phi_fu_113_p8.read();
        }
    }
    if (esl_seteq<1,8,8>(ap_ST_st83_fsm_82, ap_CS_fsm.read())) {
        j_i_reg_96 = j_reg_400.read();
    } else if (esl_seteq<1,8,8>(ap_ST_st51_fsm_50, ap_CS_fsm.read())) {
        j_i_reg_96 = ap_const_lv3_0;
    }
    if ((esl_seteq<1,8,8>(ap_ST_st10_fsm_9, ap_CS_fsm.read()) && 
         !esl_seteq<1,1,1>(or_cond5_fu_258_p2.read(), ap_const_lv1_0))) {
        p_0_reg_108 = ap_const_lv32_7149F2CA;
    } else if ((esl_seteq<1,8,8>(ap_ST_st4_fsm_3, ap_CS_fsm.read()) && 
                esl_seteq<1,1,1>(or_cond1_fu_237_p2.read(), ap_const_lv1_0))) {
        p_0_reg_108 = ap_const_lv32_F149F2CA;
    } else if ((esl_seteq<1,8,8>(ap_ST_st117_fsm_116, ap_CS_fsm.read()) && 
                !esl_seteq<1,1,1>(or_cond1_reg_344.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(or_cond3_reg_364.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(or_cond5_reg_373.read(), ap_const_lv1_0))) {
        p_0_reg_108 = reg_170.read();
    } else if (esl_seteq<1,8,8>(ap_ST_st131_fsm_130, ap_CS_fsm.read())) {
        p_0_reg_108 = tmp_17_fu_302_p1.read();
    }
    if (esl_seteq<1,8,8>(ap_ST_st83_fsm_82, ap_CS_fsm.read())) {
        ser_i_reg_74 = grp_fu_126_p2.read();
    } else if (esl_seteq<1,8,8>(ap_ST_st51_fsm_50, ap_CS_fsm.read())) {
        ser_i_reg_74 = ap_const_lv32_3F800000;
    }
    if (esl_seteq<1,8,8>(ap_ST_st83_fsm_82, ap_CS_fsm.read())) {
        x1_i_reg_86 = reg_209.read();
    } else if (esl_seteq<1,8,8>(ap_ST_st51_fsm_50, ap_CS_fsm.read())) {
        x1_i_reg_86 = reg_170.read();
    }
    if (esl_seteq<1,8,8>(ap_ST_st59_fsm_58, ap_CS_fsm.read())) {
        cof_load_reg_410 = cof_q0.read();
    }
    if (esl_seteq<1,8,8>(ap_ST_st52_fsm_51, ap_CS_fsm.read())) {
        j_reg_400 = j_fu_281_p2.read();
    }
    if (esl_seteq<1,8,8>(ap_ST_st4_fsm_3, ap_CS_fsm.read())) {
        or_cond1_reg_344 = or_cond1_fu_237_p2.read();
    }
    if (esl_seteq<1,8,8>(ap_ST_st7_fsm_6, ap_CS_fsm.read())) {
        or_cond3_reg_364 = or_cond3_fu_247_p2.read();
        tmp_s_reg_359 = grp_fu_146_p2.read();
    }
    if (esl_seteq<1,8,8>(ap_ST_st10_fsm_9, ap_CS_fsm.read())) {
        or_cond5_reg_373 = or_cond5_fu_258_p2.read();
    }
    if ((esl_seteq<1,8,8>(ap_ST_st17_fsm_16, ap_CS_fsm.read()) || esl_seteq<1,8,8>(ap_ST_st108_fsm_107, ap_CS_fsm.read()) || esl_seteq<1,8,8>(ap_ST_st116_fsm_115, ap_CS_fsm.read()))) {
        reg_170 = grp_fu_126_p2.read();
    }
    if ((esl_seteq<1,8,8>(ap_ST_st23_fsm_22, ap_CS_fsm.read()) || esl_seteq<1,8,8>(ap_ST_st39_fsm_38, ap_CS_fsm.read()) || esl_seteq<1,8,8>(ap_ST_st100_fsm_99, ap_CS_fsm.read()) || esl_seteq<1,8,8>(ap_ST_st130_fsm_129, ap_CS_fsm.read()))) {
        reg_179 = grp_fu_165_p2.read();
    }
    if ((esl_seteq<1,8,8>(ap_ST_st25_fsm_24, ap_CS_fsm.read()) || esl_seteq<1,8,8>(ap_ST_st51_fsm_50, ap_CS_fsm.read()))) {
        reg_185 = grp_fu_126_p2.read();
    }
    if ((esl_seteq<1,8,8>(ap_ST_st26_fsm_25, ap_CS_fsm.read()) || esl_seteq<1,8,8>(ap_ST_st75_fsm_74, ap_CS_fsm.read()))) {
        reg_192 = grp_fu_142_p2.read();
    }
    if ((esl_seteq<1,8,8>(ap_ST_st27_fsm_26, ap_CS_fsm.read()) || esl_seteq<1,8,8>(ap_ST_st43_fsm_42, ap_CS_fsm.read()) || esl_seteq<1,8,8>(ap_ST_st86_fsm_85, ap_CS_fsm.read()))) {
        reg_198 = grp_fu_136_p2.read();
    }
    if ((esl_seteq<1,8,8>(ap_ST_st43_fsm_42, ap_CS_fsm.read()) || esl_seteq<1,8,8>(ap_ST_st35_fsm_34, ap_CS_fsm.read()))) {
        reg_204 = grp_fu_126_p2.read();
    }
    if ((esl_seteq<1,8,8>(ap_ST_st39_fsm_38, ap_CS_fsm.read()) || esl_seteq<1,8,8>(ap_ST_st59_fsm_58, ap_CS_fsm.read()))) {
        reg_209 = grp_fu_126_p2.read();
    }
    if (esl_seteq<1,8,8>(ap_ST_st9_fsm_8, ap_CS_fsm.read())) {
        tmp3_reg_368 = tmp3_fu_253_p2.read();
    }
    if ((esl_seteq<1,8,8>(ap_ST_st10_fsm_9, ap_CS_fsm.read()) && esl_seteq<1,1,1>(or_cond5_fu_258_p2.read(), ap_const_lv1_0))) {
        tmp_125_neg_reg_377 = tmp_125_neg_fu_265_p2.read();
    }
    if (esl_seteq<1,8,8>(ap_ST_st6_fsm_5, ap_CS_fsm.read())) {
        tmp_14_reg_348 = grp_fu_146_p2.read();
        tmp_15_reg_353 = grp_fu_152_p2.read();
    }
    if (esl_seteq<1,8,8>(ap_ST_st24_fsm_23, ap_CS_fsm.read())) {
        tmp_24_reg_387 = grp_fu_165_p2.read();
    }
    if (esl_seteq<1,8,8>(ap_ST_st28_fsm_27, ap_CS_fsm.read())) {
        tmp_25_reg_392 = grp_fu_136_p2.read();
    }
    if (esl_seteq<1,8,8>(ap_ST_st3_fsm_2, ap_CS_fsm.read())) {
        tmp_35_reg_334 = grp_fu_152_p2.read();
        tmp_37_reg_339 = grp_fu_158_p2.read();
        tmp_reg_329 = grp_fu_146_p2.read();
    }
}

void gammalog::thread_ap_done() {
    if (((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
          esl_seteq<1,8,8>(ap_ST_st1_fsm_0, ap_CS_fsm.read())) || 
         esl_seteq<1,8,8>(ap_ST_st117_fsm_116, ap_CS_fsm.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void gammalog::thread_ap_idle() {
    if ((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,8,8>(ap_ST_st1_fsm_0, ap_CS_fsm.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void gammalog::thread_ap_ready() {
    if (esl_seteq<1,8,8>(ap_ST_st117_fsm_116, ap_CS_fsm.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void gammalog::thread_ap_return() {
    if (esl_seteq<1,8,8>(ap_ST_st117_fsm_116, ap_CS_fsm.read())) {
        ap_return = p_0_phi_fu_113_p8.read();
    } else {
        ap_return = ap_return_preg.read();
    }
}

void gammalog::thread_cof_address0() {
    cof_address0 =  (sc_lv<3>) (tmp_26_i_fu_287_p1.read());
}

void gammalog::thread_cof_ce0() {
    if (esl_seteq<1,8,8>(ap_ST_st58_fsm_57, ap_CS_fsm.read())) {
        cof_ce0 = ap_const_logic_1;
    } else {
        cof_ce0 = ap_const_logic_0;
    }
}

void gammalog::thread_exitcond_i_fu_275_p2() {
    exitcond_i_fu_275_p2 = (!j_i_reg_96.read().is_01() || !ap_const_lv3_6.is_01())? sc_lv<1>(): sc_lv<1>(j_i_reg_96.read() == ap_const_lv3_6);
}

void gammalog::thread_grp_fu_126_ce() {
    grp_fu_126_ce = ap_const_logic_1;
}

void gammalog::thread_grp_fu_126_opcode() {
    if ((esl_seteq<1,8,8>(ap_ST_st36_fsm_35, ap_CS_fsm.read()) || 
         esl_seteq<1,8,8>(ap_ST_st44_fsm_43, ap_CS_fsm.read()) || 
         esl_seteq<1,8,8>(ap_ST_st101_fsm_100, ap_CS_fsm.read()) || 
         esl_seteq<1,8,8>(ap_ST_st109_fsm_108, ap_CS_fsm.read()))) {
        grp_fu_126_opcode = ap_const_lv2_1;
    } else if (((esl_seteq<1,8,8>(ap_ST_st10_fsm_9, ap_CS_fsm.read()) && 
                 esl_seteq<1,1,1>(or_cond5_fu_258_p2.read(), ap_const_lv1_0)) || 
                esl_seteq<1,8,8>(ap_ST_st28_fsm_27, ap_CS_fsm.read()) || 
                esl_seteq<1,8,8>(ap_ST_st18_fsm_17, ap_CS_fsm.read()) || 
                esl_seteq<1,8,8>(ap_ST_st32_fsm_31, ap_CS_fsm.read()) || 
                esl_seteq<1,8,8>(ap_ST_st76_fsm_75, ap_CS_fsm.read()) || 
                (esl_seteq<1,8,8>(ap_ST_st52_fsm_51, ap_CS_fsm.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_fu_275_p2.read())))) {
        grp_fu_126_opcode = ap_const_lv2_0;
    } else {
        grp_fu_126_opcode =  (sc_lv<2>) ("XX");
    }
}

void gammalog::thread_grp_fu_126_p0() {
    if (esl_seteq<1,8,8>(ap_ST_st101_fsm_100, ap_CS_fsm.read())) {
        grp_fu_126_p0 = reg_179.read();
    } else if (esl_seteq<1,8,8>(ap_ST_st76_fsm_75, ap_CS_fsm.read())) {
        grp_fu_126_p0 = ser_i_reg_74.read();
    } else if (esl_seteq<1,8,8>(ap_ST_st52_fsm_51, ap_CS_fsm.read())) {
        grp_fu_126_p0 = x1_i_reg_86.read();
    } else if (esl_seteq<1,8,8>(ap_ST_st44_fsm_43, ap_CS_fsm.read())) {
        grp_fu_126_p0 = reg_185.read();
    } else if ((esl_seteq<1,8,8>(ap_ST_st36_fsm_35, ap_CS_fsm.read()) || 
                esl_seteq<1,8,8>(ap_ST_st109_fsm_108, ap_CS_fsm.read()))) {
        grp_fu_126_p0 = reg_204.read();
    } else if (esl_seteq<1,8,8>(ap_ST_st28_fsm_27, ap_CS_fsm.read())) {
        grp_fu_126_p0 = reg_192.read();
    } else if ((esl_seteq<1,8,8>(ap_ST_st18_fsm_17, ap_CS_fsm.read()) || 
                esl_seteq<1,8,8>(ap_ST_st32_fsm_31, ap_CS_fsm.read()))) {
        grp_fu_126_p0 = reg_170.read();
    } else if (esl_seteq<1,8,8>(ap_ST_st10_fsm_9, ap_CS_fsm.read())) {
        grp_fu_126_p0 = a.read();
    } else {
        grp_fu_126_p0 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void gammalog::thread_grp_fu_126_p1() {
    if (esl_seteq<1,8,8>(ap_ST_st109_fsm_108, ap_CS_fsm.read())) {
        grp_fu_126_p1 = reg_170.read();
    } else if (esl_seteq<1,8,8>(ap_ST_st101_fsm_100, ap_CS_fsm.read())) {
        grp_fu_126_p1 = reg_185.read();
    } else if (esl_seteq<1,8,8>(ap_ST_st76_fsm_75, ap_CS_fsm.read())) {
        grp_fu_126_p1 = reg_192.read();
    } else if (esl_seteq<1,8,8>(ap_ST_st52_fsm_51, ap_CS_fsm.read())) {
        grp_fu_126_p1 = ap_const_lv32_3F800000;
    } else if (esl_seteq<1,8,8>(ap_ST_st36_fsm_35, ap_CS_fsm.read())) {
        grp_fu_126_p1 = tmp_25_reg_392.read();
    } else if (esl_seteq<1,8,8>(ap_ST_st32_fsm_31, ap_CS_fsm.read())) {
        grp_fu_126_p1 = ap_const_lv32_3F000000;
    } else if ((esl_seteq<1,8,8>(ap_ST_st28_fsm_27, ap_CS_fsm.read()) || 
                esl_seteq<1,8,8>(ap_ST_st44_fsm_43, ap_CS_fsm.read()))) {
        grp_fu_126_p1 = reg_198.read();
    } else if (esl_seteq<1,8,8>(ap_ST_st18_fsm_17, ap_CS_fsm.read())) {
        grp_fu_126_p1 = ap_const_lv32_40B00000;
    } else if (esl_seteq<1,8,8>(ap_ST_st10_fsm_9, ap_CS_fsm.read())) {
        grp_fu_126_p1 = ap_const_lv32_BF800000;
    } else {
        grp_fu_126_p1 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void gammalog::thread_grp_fu_136_ce() {
    grp_fu_136_ce = ap_const_logic_1;
}

void gammalog::thread_grp_fu_136_p0() {
    if (esl_seteq<1,8,8>(ap_ST_st52_fsm_51, ap_CS_fsm.read())) {
        grp_fu_136_p0 = ser_i_reg_74.read();
    } else if (esl_seteq<1,8,8>(ap_ST_st40_fsm_39, ap_CS_fsm.read())) {
        grp_fu_136_p0 = reg_209.read();
    } else if (esl_seteq<1,8,8>(ap_ST_st25_fsm_24, ap_CS_fsm.read())) {
        grp_fu_136_p0 = tmp_24_reg_387.read();
    } else if (esl_seteq<1,8,8>(ap_ST_st24_fsm_23, ap_CS_fsm.read())) {
        grp_fu_136_p0 = reg_170.read();
    } else {
        grp_fu_136_p0 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void gammalog::thread_grp_fu_136_p1() {
    if (esl_seteq<1,8,8>(ap_ST_st52_fsm_51, ap_CS_fsm.read())) {
        grp_fu_136_p1 = ap_const_lv32_40206C99;
    } else if (esl_seteq<1,8,8>(ap_ST_st25_fsm_24, ap_CS_fsm.read())) {
        grp_fu_136_p1 = a.read();
    } else if ((esl_seteq<1,8,8>(ap_ST_st24_fsm_23, ap_CS_fsm.read()) || 
                esl_seteq<1,8,8>(ap_ST_st40_fsm_39, ap_CS_fsm.read()))) {
        grp_fu_136_p1 = reg_179.read();
    } else {
        grp_fu_136_p1 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void gammalog::thread_grp_fu_142_ce() {
    grp_fu_142_ce = ap_const_logic_1;
}

void gammalog::thread_grp_fu_142_p0() {
    if (esl_seteq<1,8,8>(ap_ST_st60_fsm_59, ap_CS_fsm.read())) {
        grp_fu_142_p0 = cof_load_reg_410.read();
    } else if (esl_seteq<1,8,8>(ap_ST_st11_fsm_10, ap_CS_fsm.read())) {
        grp_fu_142_p0 = tmp_19_fu_271_p1.read();
    } else {
        grp_fu_142_p0 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void gammalog::thread_grp_fu_142_p1() {
    if (esl_seteq<1,8,8>(ap_ST_st60_fsm_59, ap_CS_fsm.read())) {
        grp_fu_142_p1 = reg_209.read();
    } else if (esl_seteq<1,8,8>(ap_ST_st11_fsm_10, ap_CS_fsm.read())) {
        grp_fu_142_p1 = b.read();
    } else {
        grp_fu_142_p1 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void gammalog::thread_grp_fu_146_ce() {
    grp_fu_146_ce = ap_const_logic_1;
}

void gammalog::thread_grp_fu_146_opcode() {
    if ((esl_seteq<1,8,8>(ap_ST_st5_fsm_4, ap_CS_fsm.read()) || 
         (esl_seteq<1,8,8>(ap_ST_st4_fsm_3, ap_CS_fsm.read()) && 
          !esl_seteq<1,1,1>(or_cond1_fu_237_p2.read(), ap_const_lv1_0)))) {
        grp_fu_146_opcode = ap_const_lv5_1;
    } else if (((esl_seteq<1,8,8>(ap_ST_st1_fsm_0, ap_CS_fsm.read()) && 
                 !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || 
                (esl_seteq<1,8,8>(ap_ST_st7_fsm_6, ap_CS_fsm.read()) && 
                 esl_seteq<1,1,1>(or_cond3_fu_247_p2.read(), ap_const_lv1_0)))) {
        grp_fu_146_opcode = ap_const_lv5_4;
    } else {
        grp_fu_146_opcode =  (sc_lv<5>) ("XXXXX");
    }
}

void gammalog::thread_grp_fu_146_p0() {
    if ((esl_seteq<1,8,8>(ap_ST_st4_fsm_3, ap_CS_fsm.read()) || 
         esl_seteq<1,8,8>(ap_ST_st7_fsm_6, ap_CS_fsm.read()))) {
        grp_fu_146_p0 = a.read();
    } else if ((esl_seteq<1,8,8>(ap_ST_st1_fsm_0, ap_CS_fsm.read()) || 
                esl_seteq<1,8,8>(ap_ST_st5_fsm_4, ap_CS_fsm.read()))) {
        grp_fu_146_p0 = x.read();
    } else {
        grp_fu_146_p0 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void gammalog::thread_grp_fu_146_p1() {
    if ((esl_seteq<1,8,8>(ap_ST_st4_fsm_3, ap_CS_fsm.read()) || 
         esl_seteq<1,8,8>(ap_ST_st7_fsm_6, ap_CS_fsm.read()))) {
        grp_fu_146_p1 = ap_const_lv32_3F800000;
    } else if ((esl_seteq<1,8,8>(ap_ST_st1_fsm_0, ap_CS_fsm.read()) || 
                esl_seteq<1,8,8>(ap_ST_st5_fsm_4, ap_CS_fsm.read()))) {
        grp_fu_146_p1 = ap_const_lv32_0;
    } else {
        grp_fu_146_p1 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void gammalog::thread_grp_fu_152_ce() {
    grp_fu_152_ce = ap_const_logic_1;
}

void gammalog::thread_grp_fu_152_opcode() {
    if ((esl_seteq<1,8,8>(ap_ST_st4_fsm_3, ap_CS_fsm.read()) && 
         !esl_seteq<1,1,1>(or_cond1_fu_237_p2.read(), ap_const_lv1_0))) {
        grp_fu_152_opcode = ap_const_lv5_2;
    } else if ((esl_seteq<1,8,8>(ap_ST_st1_fsm_0, ap_CS_fsm.read()) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        grp_fu_152_opcode = ap_const_lv5_4;
    } else {
        grp_fu_152_opcode =  (sc_lv<5>) ("XXXXX");
    }
}

void gammalog::thread_grp_fu_152_p0() {
    if (esl_seteq<1,8,8>(ap_ST_st4_fsm_3, ap_CS_fsm.read())) {
        grp_fu_152_p0 = b.read();
    } else if (esl_seteq<1,8,8>(ap_ST_st1_fsm_0, ap_CS_fsm.read())) {
        grp_fu_152_p0 = a.read();
    } else {
        grp_fu_152_p0 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void gammalog::thread_grp_fu_152_p1() {
    grp_fu_152_p1 = ap_const_lv32_0;
}

void gammalog::thread_grp_fu_158_ce() {
    grp_fu_158_ce = ap_const_logic_1;
}

void gammalog::thread_grp_fu_158_opcode() {
    grp_fu_158_opcode = ap_const_lv5_5;
}

void gammalog::thread_grp_fu_158_p0() {
    grp_fu_158_p0 = b.read();
}

void gammalog::thread_grp_fu_158_p1() {
    grp_fu_158_p1 = ap_const_lv32_0;
}

void gammalog::thread_grp_fu_165_ce() {
    grp_fu_165_ce = ap_const_logic_1;
}

void gammalog::thread_grp_fu_165_p0() {
    grp_fu_165_p0 = ap_const_lv32_0;
}

void gammalog::thread_grp_fu_165_p1() {
    if (esl_seteq<1,8,8>(ap_ST_st87_fsm_86, ap_CS_fsm.read())) {
        grp_fu_165_p1 = reg_198.read();
    } else if (esl_seteq<1,8,8>(ap_ST_st26_fsm_25, ap_CS_fsm.read())) {
        grp_fu_165_p1 = reg_185.read();
    } else if (esl_seteq<1,8,8>(ap_ST_st10_fsm_9, ap_CS_fsm.read())) {
        grp_fu_165_p1 = x.read();
    } else if ((esl_seteq<1,8,8>(ap_ST_st7_fsm_6, ap_CS_fsm.read()) || 
                esl_seteq<1,8,8>(ap_ST_st11_fsm_10, ap_CS_fsm.read()))) {
        grp_fu_165_p1 = b.read();
    } else {
        grp_fu_165_p1 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void gammalog::thread_j_fu_281_p2() {
    j_fu_281_p2 = (!j_i_reg_96.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_bigint<3>(j_i_reg_96.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void gammalog::thread_or_cond1_fu_237_p2() {
    or_cond1_fu_237_p2 = (tmp1_fu_231_p2.read() & tmp_36_fu_221_p2.read());
}

void gammalog::thread_or_cond3_fu_247_p2() {
    or_cond3_fu_247_p2 = (tmp2_fu_243_p2.read() & grp_fu_146_p2.read());
}

void gammalog::thread_or_cond5_fu_258_p2() {
    or_cond5_fu_258_p2 = (tmp3_reg_368.read() & tmp_s_reg_359.read());
}

void gammalog::thread_p_0_phi_fu_113_p8() {
    if ((esl_seteq<1,8,8>(ap_ST_st117_fsm_116, ap_CS_fsm.read()) && 
         !esl_seteq<1,1,1>(or_cond1_reg_344.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(or_cond3_reg_364.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(or_cond5_reg_373.read(), ap_const_lv1_0))) {
        p_0_phi_fu_113_p8 = reg_170.read();
    } else {
        p_0_phi_fu_113_p8 = p_0_reg_108.read();
    }
}

void gammalog::thread_tmp1_fu_231_p2() {
    tmp1_fu_231_p2 = (tmp_34_fu_216_p2.read() & tmp_38_fu_226_p2.read());
}

void gammalog::thread_tmp2_fu_243_p2() {
    tmp2_fu_243_p2 = (tmp_14_reg_348.read() & tmp_15_reg_353.read());
}

void gammalog::thread_tmp3_fu_253_p2() {
    tmp3_fu_253_p2 = (grp_fu_146_p2.read() & tmp_15_reg_353.read());
}

void gammalog::thread_tmp_123_neg_fu_296_p2() {
    tmp_123_neg_fu_296_p2 = (tmp_123_to_int_fu_292_p1.read() ^ ap_const_lv32_80000000);
}

void gammalog::thread_tmp_123_to_int_fu_292_p1() {
    tmp_123_to_int_fu_292_p1 = reg_179.read();
}

void gammalog::thread_tmp_125_neg_fu_265_p2() {
    tmp_125_neg_fu_265_p2 = (tmp_125_to_int_fu_262_p1.read() ^ ap_const_lv32_80000000);
}

void gammalog::thread_tmp_125_to_int_fu_262_p1() {
    tmp_125_to_int_fu_262_p1 = x.read();
}

void gammalog::thread_tmp_17_fu_302_p1() {
    tmp_17_fu_302_p1 = tmp_123_neg_fu_296_p2.read();
}

void gammalog::thread_tmp_19_fu_271_p1() {
    tmp_19_fu_271_p1 = tmp_125_neg_reg_377.read();
}

void gammalog::thread_tmp_26_i_fu_287_p1() {
    tmp_26_i_fu_287_p1 = esl_zext<64,3>(j_i_reg_96.read());
}

void gammalog::thread_tmp_34_fu_216_p2() {
    tmp_34_fu_216_p2 = (tmp_reg_329.read() ^ ap_const_lv1_1);
}

void gammalog::thread_tmp_36_fu_221_p2() {
    tmp_36_fu_221_p2 = (tmp_35_reg_334.read() ^ ap_const_lv1_1);
}

void gammalog::thread_tmp_38_fu_226_p2() {
    tmp_38_fu_226_p2 = (tmp_37_reg_339.read() ^ ap_const_lv1_1);
}

void gammalog::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint()) {
        case 0 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 1 : 
            ap_NS_fsm = ap_ST_st3_fsm_2;
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_st4_fsm_3;
            break;
        case 3 : 
            if (esl_seteq<1,1,1>(or_cond1_fu_237_p2.read(), ap_const_lv1_0)) {
                ap_NS_fsm = ap_ST_st117_fsm_116;
            } else {
                ap_NS_fsm = ap_ST_st5_fsm_4;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_st6_fsm_5;
            break;
        case 5 : 
            ap_NS_fsm = ap_ST_st7_fsm_6;
            break;
        case 6 : 
            if (!esl_seteq<1,1,1>(or_cond3_fu_247_p2.read(), ap_const_lv1_0)) {
                ap_NS_fsm = ap_ST_st118_fsm_117;
            } else {
                ap_NS_fsm = ap_ST_st8_fsm_7;
            }
            break;
        case 7 : 
            ap_NS_fsm = ap_ST_st9_fsm_8;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_st10_fsm_9;
            break;
        case 9 : 
            if (!esl_seteq<1,1,1>(or_cond5_fu_258_p2.read(), ap_const_lv1_0)) {
                ap_NS_fsm = ap_ST_st117_fsm_116;
            } else {
                ap_NS_fsm = ap_ST_st11_fsm_10;
            }
            break;
        case 10 : 
            ap_NS_fsm = ap_ST_st12_fsm_11;
            break;
        case 11 : 
            ap_NS_fsm = ap_ST_st13_fsm_12;
            break;
        case 12 : 
            ap_NS_fsm = ap_ST_st14_fsm_13;
            break;
        case 13 : 
            ap_NS_fsm = ap_ST_st15_fsm_14;
            break;
        case 14 : 
            ap_NS_fsm = ap_ST_st16_fsm_15;
            break;
        case 15 : 
            ap_NS_fsm = ap_ST_st17_fsm_16;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_st18_fsm_17;
            break;
        case 17 : 
            ap_NS_fsm = ap_ST_st19_fsm_18;
            break;
        case 18 : 
            ap_NS_fsm = ap_ST_st20_fsm_19;
            break;
        case 19 : 
            ap_NS_fsm = ap_ST_st21_fsm_20;
            break;
        case 20 : 
            ap_NS_fsm = ap_ST_st22_fsm_21;
            break;
        case 21 : 
            ap_NS_fsm = ap_ST_st23_fsm_22;
            break;
        case 22 : 
            ap_NS_fsm = ap_ST_st24_fsm_23;
            break;
        case 23 : 
            ap_NS_fsm = ap_ST_st25_fsm_24;
            break;
        case 24 : 
            ap_NS_fsm = ap_ST_st26_fsm_25;
            break;
        case 25 : 
            ap_NS_fsm = ap_ST_st27_fsm_26;
            break;
        case 26 : 
            ap_NS_fsm = ap_ST_st28_fsm_27;
            break;
        case 27 : 
            ap_NS_fsm = ap_ST_st29_fsm_28;
            break;
        case 28 : 
            ap_NS_fsm = ap_ST_st30_fsm_29;
            break;
        case 29 : 
            ap_NS_fsm = ap_ST_st31_fsm_30;
            break;
        case 30 : 
            ap_NS_fsm = ap_ST_st32_fsm_31;
            break;
        case 31 : 
            ap_NS_fsm = ap_ST_st33_fsm_32;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_st34_fsm_33;
            break;
        case 33 : 
            ap_NS_fsm = ap_ST_st35_fsm_34;
            break;
        case 34 : 
            ap_NS_fsm = ap_ST_st36_fsm_35;
            break;
        case 35 : 
            ap_NS_fsm = ap_ST_st37_fsm_36;
            break;
        case 36 : 
            ap_NS_fsm = ap_ST_st38_fsm_37;
            break;
        case 37 : 
            ap_NS_fsm = ap_ST_st39_fsm_38;
            break;
        case 38 : 
            ap_NS_fsm = ap_ST_st40_fsm_39;
            break;
        case 39 : 
            ap_NS_fsm = ap_ST_st41_fsm_40;
            break;
        case 40 : 
            ap_NS_fsm = ap_ST_st42_fsm_41;
            break;
        case 41 : 
            ap_NS_fsm = ap_ST_st43_fsm_42;
            break;
        case 42 : 
            ap_NS_fsm = ap_ST_st44_fsm_43;
            break;
        case 43 : 
            ap_NS_fsm = ap_ST_st45_fsm_44;
            break;
        case 44 : 
            ap_NS_fsm = ap_ST_st46_fsm_45;
            break;
        case 45 : 
            ap_NS_fsm = ap_ST_st47_fsm_46;
            break;
        case 46 : 
            ap_NS_fsm = ap_ST_st48_fsm_47;
            break;
        case 47 : 
            ap_NS_fsm = ap_ST_st49_fsm_48;
            break;
        case 48 : 
            ap_NS_fsm = ap_ST_st50_fsm_49;
            break;
        case 49 : 
            ap_NS_fsm = ap_ST_st51_fsm_50;
            break;
        case 50 : 
            ap_NS_fsm = ap_ST_st52_fsm_51;
            break;
        case 51 : 
            if (!esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_fu_275_p2.read())) {
                ap_NS_fsm = ap_ST_st84_fsm_83;
            } else {
                ap_NS_fsm = ap_ST_st53_fsm_52;
            }
            break;
        case 52 : 
            ap_NS_fsm = ap_ST_st54_fsm_53;
            break;
        case 53 : 
            ap_NS_fsm = ap_ST_st55_fsm_54;
            break;
        case 54 : 
            ap_NS_fsm = ap_ST_st56_fsm_55;
            break;
        case 55 : 
            ap_NS_fsm = ap_ST_st57_fsm_56;
            break;
        case 56 : 
            ap_NS_fsm = ap_ST_st58_fsm_57;
            break;
        case 57 : 
            ap_NS_fsm = ap_ST_st59_fsm_58;
            break;
        case 58 : 
            ap_NS_fsm = ap_ST_st60_fsm_59;
            break;
        case 59 : 
            ap_NS_fsm = ap_ST_st61_fsm_60;
            break;
        case 60 : 
            ap_NS_fsm = ap_ST_st62_fsm_61;
            break;
        case 61 : 
            ap_NS_fsm = ap_ST_st63_fsm_62;
            break;
        case 62 : 
            ap_NS_fsm = ap_ST_st64_fsm_63;
            break;
        case 63 : 
            ap_NS_fsm = ap_ST_st65_fsm_64;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_st66_fsm_65;
            break;
        case 65 : 
            ap_NS_fsm = ap_ST_st67_fsm_66;
            break;
        case 66 : 
            ap_NS_fsm = ap_ST_st68_fsm_67;
            break;
        case 67 : 
            ap_NS_fsm = ap_ST_st69_fsm_68;
            break;
        case 68 : 
            ap_NS_fsm = ap_ST_st70_fsm_69;
            break;
        case 69 : 
            ap_NS_fsm = ap_ST_st71_fsm_70;
            break;
        case 70 : 
            ap_NS_fsm = ap_ST_st72_fsm_71;
            break;
        case 71 : 
            ap_NS_fsm = ap_ST_st73_fsm_72;
            break;
        case 72 : 
            ap_NS_fsm = ap_ST_st74_fsm_73;
            break;
        case 73 : 
            ap_NS_fsm = ap_ST_st75_fsm_74;
            break;
        case 74 : 
            ap_NS_fsm = ap_ST_st76_fsm_75;
            break;
        case 75 : 
            ap_NS_fsm = ap_ST_st77_fsm_76;
            break;
        case 76 : 
            ap_NS_fsm = ap_ST_st78_fsm_77;
            break;
        case 77 : 
            ap_NS_fsm = ap_ST_st79_fsm_78;
            break;
        case 78 : 
            ap_NS_fsm = ap_ST_st80_fsm_79;
            break;
        case 79 : 
            ap_NS_fsm = ap_ST_st81_fsm_80;
            break;
        case 80 : 
            ap_NS_fsm = ap_ST_st82_fsm_81;
            break;
        case 81 : 
            ap_NS_fsm = ap_ST_st83_fsm_82;
            break;
        case 82 : 
            ap_NS_fsm = ap_ST_st52_fsm_51;
            break;
        case 83 : 
            ap_NS_fsm = ap_ST_st85_fsm_84;
            break;
        case 84 : 
            ap_NS_fsm = ap_ST_st86_fsm_85;
            break;
        case 85 : 
            ap_NS_fsm = ap_ST_st87_fsm_86;
            break;
        case 86 : 
            ap_NS_fsm = ap_ST_st88_fsm_87;
            break;
        case 87 : 
            ap_NS_fsm = ap_ST_st89_fsm_88;
            break;
        case 88 : 
            ap_NS_fsm = ap_ST_st90_fsm_89;
            break;
        case 89 : 
            ap_NS_fsm = ap_ST_st91_fsm_90;
            break;
        case 90 : 
            ap_NS_fsm = ap_ST_st92_fsm_91;
            break;
        case 91 : 
            ap_NS_fsm = ap_ST_st93_fsm_92;
            break;
        case 92 : 
            ap_NS_fsm = ap_ST_st94_fsm_93;
            break;
        case 93 : 
            ap_NS_fsm = ap_ST_st95_fsm_94;
            break;
        case 94 : 
            ap_NS_fsm = ap_ST_st96_fsm_95;
            break;
        case 95 : 
            ap_NS_fsm = ap_ST_st97_fsm_96;
            break;
        case 96 : 
            ap_NS_fsm = ap_ST_st98_fsm_97;
            break;
        case 97 : 
            ap_NS_fsm = ap_ST_st99_fsm_98;
            break;
        case 98 : 
            ap_NS_fsm = ap_ST_st100_fsm_99;
            break;
        case 99 : 
            ap_NS_fsm = ap_ST_st101_fsm_100;
            break;
        case 100 : 
            ap_NS_fsm = ap_ST_st102_fsm_101;
            break;
        case 101 : 
            ap_NS_fsm = ap_ST_st103_fsm_102;
            break;
        case 102 : 
            ap_NS_fsm = ap_ST_st104_fsm_103;
            break;
        case 103 : 
            ap_NS_fsm = ap_ST_st105_fsm_104;
            break;
        case 104 : 
            ap_NS_fsm = ap_ST_st106_fsm_105;
            break;
        case 105 : 
            ap_NS_fsm = ap_ST_st107_fsm_106;
            break;
        case 106 : 
            ap_NS_fsm = ap_ST_st108_fsm_107;
            break;
        case 107 : 
            ap_NS_fsm = ap_ST_st109_fsm_108;
            break;
        case 108 : 
            ap_NS_fsm = ap_ST_st110_fsm_109;
            break;
        case 109 : 
            ap_NS_fsm = ap_ST_st111_fsm_110;
            break;
        case 110 : 
            ap_NS_fsm = ap_ST_st112_fsm_111;
            break;
        case 111 : 
            ap_NS_fsm = ap_ST_st113_fsm_112;
            break;
        case 112 : 
            ap_NS_fsm = ap_ST_st114_fsm_113;
            break;
        case 113 : 
            ap_NS_fsm = ap_ST_st115_fsm_114;
            break;
        case 114 : 
            ap_NS_fsm = ap_ST_st116_fsm_115;
            break;
        case 115 : 
            ap_NS_fsm = ap_ST_st117_fsm_116;
            break;
        case 116 : 
            ap_NS_fsm = ap_ST_st1_fsm_0;
            break;
        case 117 : 
            ap_NS_fsm = ap_ST_st119_fsm_118;
            break;
        case 118 : 
            ap_NS_fsm = ap_ST_st120_fsm_119;
            break;
        case 119 : 
            ap_NS_fsm = ap_ST_st121_fsm_120;
            break;
        case 120 : 
            ap_NS_fsm = ap_ST_st122_fsm_121;
            break;
        case 121 : 
            ap_NS_fsm = ap_ST_st123_fsm_122;
            break;
        case 122 : 
            ap_NS_fsm = ap_ST_st124_fsm_123;
            break;
        case 123 : 
            ap_NS_fsm = ap_ST_st125_fsm_124;
            break;
        case 124 : 
            ap_NS_fsm = ap_ST_st126_fsm_125;
            break;
        case 125 : 
            ap_NS_fsm = ap_ST_st127_fsm_126;
            break;
        case 126 : 
            ap_NS_fsm = ap_ST_st128_fsm_127;
            break;
        case 127 : 
            ap_NS_fsm = ap_ST_st129_fsm_128;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_st130_fsm_129;
            break;
        case 129 : 
            ap_NS_fsm = ap_ST_st131_fsm_130;
            break;
        case 130 : 
            ap_NS_fsm = ap_ST_st117_fsm_116;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<8>) ("XXXXXXXX");
            break;
    }
}
}

